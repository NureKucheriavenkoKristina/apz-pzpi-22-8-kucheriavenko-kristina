Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії
 






Лабораторна робота
з дисципліни: «Архітектура програмного забезпечення»
на тему: «Розробка програмної архітектури, створення та відлагодження програмного коду веб клієнта програмної системи»
 



									Виконала: 	
									ст. гр. ПЗПІ-22-8	
									Кучерявенко К. Р.
									24 травня 2025 р.
									Перевірив:						 						Ст. викл. Сокорчук І. П.

                                                					



Харків 2025
3 РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА
ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ВЕБ КЛІЄНТА
ПРОГРАМНОЇ СИСТЕМИ
	3.1. Історія змін


Зміни в документі нотуються до таблиці 3.1.

Таблиця 3.1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	19.05.25	0.1	Створено розділ «Історія змін»
2	19.05.25	0.1	Створено розділ «Завдання»
3	19.05.25	0.1	Створено розділ «Опис виконаної роботи»
4	19.05.25	0.1	Створено розділ «Висновки»
5	24.05.25	0.1	Додано додаток А з посиланням на відеоролик
6	24.05.25	0.1	Додано додаток Б з графічними матеріалами
7	24.05.25	0.1	Додано додаток В з програмним кодом
			


3.2 Завдання


	Мета завдання – розробити частину системи, яка забезпечує підтримку роботи клієнтів у веб-режимі та функціональність адміністрування. Система повинна мати інтерфейс адміністратора з підтримкою інтернаціоналізації та локалізації. Це включає адаптацію до різних мов, форматів дати й часу, систем вимірювання, порядку сортування тексту. 

3.3 Опис виконаної роботи


Веб частина системи реалізована з використанням бібліотеки React та інструмента збірки Vite. Архітектура побудована за принципами розділення відповідальностей (Separation of Concerns) і компонентного підходу. Інтерфейс користувача реалізований за допомогою React-компонентів та стилізований за допомогою TailwindCSS. Маршрутизація: реалізована з використанням react-router-dom. Інтернаціоналізація: реалізована за допомогою i18next та react-i18next. Управління датами і часом через бібліотеки moment та react-datetime. Логіка користувача та адміністратора винесена в окремі компоненти з відповідними маршрутами.
Програмні технології та компоненти:
–	React основна бібліотека для створення UI;
–	Vite швидкий інструмент розробки та збірки;
–	TailwindCSS утилітарний CSS-фреймворк для адаптивного дизайну;
–	React Router DOM для маршрутизації сторінок;
–	i18next, react-i18next, i18next-browser-languagedetector для інтернаціоналізації;
–	moment, react-datetime для обробки дат і часу;
–	lucide-react для векторних іконок;
–	TypeScript для типізації та покращення якості коду;
–	ESLint, TypeScript ESLint – для підтримки якості та стилю коду.
	Веб-інтерфейс надає доступ до наступної бізнес-логіки:
–	користувачі (User): автентифікація, призначення ролей, контроль доступу;
–	донори (Donor): перегляд, додавання, редагування, валідація віку, ідентифікатора, групи крові;
–	матеріали (BiologicalMaterial): створення, оновлення, зміна статусу, перевірка дат, зв’язок із донорами;
–	умови зберігання (StorageCondition): прив’язка до матеріалів, перевірка параметрів;
–	журнал подій (EventLog): перегляд історії дій, журнал змін;
–	сповіщення (Notification): показ системних подій, пов’язаних із матеріалами;
–	права доступу: логіка відображення елементів відповідно до ролі.
	Захист даних у веб-частині – приватні маршрути доступні лише автентифікованим користувачам, обмеження доступу на основі accessRights, валідація введення як на клієнті (формат, обов’язковість, довжина), так і на сервері.
Мінімізація даних – рендер тільки необхідних полів на клієнті.
	Веб-клієнт взаємодіє з бекендом через REST API, реалізований у Spring Boot. Використовуються методи GET, POST, PUT, DELETE для CRUD-операцій. Дані передаються у форматі JSON.
	Система використовує i18next для інтерналізації. Мова визначається автоматично через i18next-browser-languagedetector (налаштування браузера), вручну через інтерфейс користувача (UI перемикач мови). Тексти зберігаються в public/locales/ translation.json. Реалізовані варіанти локалізації українська та англійська. Для роботи з датами та часом у веб-інтерфейсі застосовуються moment – для обробки дати, часу, форматування та врахування локалі та react-datetime – компонент введення дати та часу. Час і дати передаються у форматі ISO 8601 у JSON (наприклад, "2025-05-19T15:30:00Z"). Форматування часу виконується згідно з локаллю, визначеною через i18next, що дозволяє відображати дату/час у звичному для користувача форматі. Час у системі завжди синхронізується з локальним часом користувача, визначеним за допомогою moment().locale(...) на клієнті.
Функціональність для налаштування та адміністрування:
–	управління користувачами: ролі, права доступу;
–	журнал дій (EventLog);
–	перегляд усіх записів;
	–	можливість видалення та редагування записів;
–	налаштування локалізації – перемикач мови в UI;
–	налаштування формату дати;
	–	конфігурація доступу: визначення, які компоненти доступні для FULL, READ_ALL, READ_ONLY.
	Для кращого розуміння системи та її функціональності було підготовано кілька діаграм: UML діаграма прецедентів, UML діаграма компонентів, UML діаграма діяльності та UML діаграма станів. 


	3.4 Висновки


Під час роботи було розроблено веб-частину системи. Використання сучасних технологій, таких як React, Vite, TailwindCSS та i18next, забезпечило гнучкість, адаптивність та ефективне управління інтернаціоналізацією. Застосування архітектурних принципів розділення відповідальностей і компонентного підходу дозволило створити структуровану та зрозумілу систему. Захист даних реалізовано через систему прав доступу та механізми аутентифікації, а інтеграція з REST API забезпечує безперебійний обмін інформацією між клієнтською та серверною частинами. Додаткові можливості адміністрування, такі як управління користувачами, правами доступу та журналом подій, гарантують зручність у роботі адміністратора. Таким чином, розроблена система відповідає поставленим вимогам, забезпечує ефективну взаємодію користувачів із даними та має необхідний функціонал для підтримки та адміністрування веб-ресурсу. 
Додаток А
Хронологічний опис та посилання

Відеозапис доповіді на YouTube: https://youtu.be/Q9k7TLqU4_o

Хронологічний опис доповіді:
00:00 Вступна частина
На самому початку доповіді відбувається коротке представлення, де оголошується тема ролику, яка зосереджена на тестуванні веб-клієнта програмної системи.
00:09 Тестування: реєстрація 
Перший функціональний блок присвячено перевірці процесу реєстрації. Демонструється екран авторизації, який розроблений з підтримкою двох мов –української та англійської. Це дозволяє користувачу самостійно обрати зручний варіант інтерфейсу. Якщо обліковий запис відсутній, наявна можливість створення нового запису через відповідну форму, де користувач може вибрати між кількома рівнями доступу. При цьому забезпечується перевірка коректності введених даних.
00:29 Тестування: переклад сторінок
Наступним кроком стає перевірка функціоналу динамічної зміни мови інтерфейсу. Після успішної реєстрації користувача зустрічає головна сторінка, яка містить меню навігації, кнопки для виходу та перемикання мови. Завдяки функціоналу перекладу, усі елементи інтерфейсу, включаючи детальні форми для створення та редагування записів, миттєво адаптуються до оголошеної мовної версії.
00:51 Тестування: формат часу та дати
Особлива увага приділяється відображенню часових та календарних форматів. В системі передбачено спеціальну кнопку для зміни способу відображення дати та часу. Користувач може перемкнути інтерфейс між європейським стилем (де день розташовується перед місяцем) та американським форматом (де місяць вказується першим). Це також супроводжується конвертацією форматів часу: з 24-годинного режиму в 12-годинний та навпаки.
01:18 Тестування: взаємодія з таблицею «Біологічні матеріали»
На даному етапі розглядається модуль роботи з біологічними матеріалами. Інтерфейс має форму, яку потрібно заповнити для створення нового запису. У формі передбачено кілька полів: від базових характеристик матеріалу до деталей щодо донора, дат отримання зразка та терміну придатності. Особливими є числові поля для вказання температури, рівня кисню та вологості, для яких встановлено реалістичні межі. При перевірці форми система враховує важливі обмеження, що гарантує достовірність введених даних, а також реалізовано можливість сортування записів для зручності навігації по таблиці.
02:20 Тестування: взаємодія з таблицею «Донори»
Функціонал, присвячений роботі з даними донорів, включає створення та управління інформацією про окремих осіб. Форма для введення даних містить такі поля, як ім’я, прізвище, дата народження, стать, номер паспорта, а також група крові. Важливим моментом є перевірка вікового обмеження: лише користувачі, старші за 18 років, можуть бути внесені до бази як донори. Система також передбачає можливість редагування та видалення записів, а завдяки функції сортування за заголовками стовпців знаходження потрібного запису стає надзвичайно зручним.
03:03 Тестування: взаємодія з таблицею «Логування»
Ця частина доповіді розглядає журнали подій, де реєструється кожна дія користувачів та події системи. Особливість даного модуля полягає у використанні локального часу при створенні записів, що дозволяє відображати події як за місцевим, так і за універсальним часовим поясом. Можливість створення, редагування та видалення записів забезпечує гнучке управління історією змін у системі, а додатковий функціонал сортування дозволяє швидко знаходити конкретні записи.
03:44 Тестування: взаємодія з таблицею «Повідомлення»
У модулі повідомлень демонструється автоматичне формування сповіщень, спрямованих на попередження користувачів про невідповідність певних умов. Система дозволяє не лише відслідковувати автоматично створені записи, а й вручну додавати нові повідомлення, коригувати існуючі або видаляти їх. Важливим аспектом є контроль часу, що забезпечує можливість вказувати дату лише для минулих або поточних подій, тим самим запобігаючи неправильному відображенню інформації.
04:18 Тестування: взаємодія з таблицею «Умови зберігання»
Ця частина охоплює управління параметрами зберігання зразків. Записи містять дані про температуру, вологість та рівень кисню, причому температура зберігається виключно у градусах Цельсія. Дані параметри мають чітко визначені діапазони, а час вимірювання обмежено лише поточним або попередніми датами. Система також автоматично розраховує «зону зберігання», змінюючи колір індикатора в залежності від відповідності зазначеним стандартам, що дозволяє в режимі реального часу оцінити стан умов зберігання.
05:07 Тестування: взаємодія з таблицею «Користувачі»
Модуль управління користувачами демонструє комплексний підхід до роботи з обліковими записами. На спеціальній сторінці наведено детальну форму для створення нового запису, що включає інформацію про ім’я, прізвище, логін, пароль і встановлення ролі із зазначенням прав доступу. Важливим є візуальне позначення різних рівнів доступу за допомогою кольорування – користувачі з максимальною повноваженнями відмічені зеленим, а ті, чий доступ обмежено, – червоним, або жовтим при частковому доступі. Цей підхід значно спрощує процес ідентифікації та управління користувачами, а також дозволяє оперативно знаходити потрібну інформацію в системі.
05:49 Тестування: доступ без авторизації
Для перевірки безпеки системи здійснюється тестування недопустимості доступу до внутрішніх даних без авторизації. Сценарій полягає у спробі отримати дані, змінивши URL-адресу сторінки після виходу з системи. Завдяки вбудованим механізмам захисту, користувач одразу перенаправляється на головну сторінку, що свідчить про надійну реалізацію обмежень – доступ до конфіденційної інформації надається лише після успішної авторизації.
06:06 Тестування: авторизація з різним рівнем доступу
Заключний блок спрямовано на перевірку авторизаційних сценаріїв для користувачів з різними правами доступу. Демонструється, як система розрізняє користувачів з найнижчим рівнем доступу, яким автоматично блокується можливість редагування або видалення даних, та тих, хто має часткові повноваження – для яких деякі функції також залишаються недоступними, зокрема робота з журналом подій. При цьому користувач із повним рівнем доступу отримує можливість працювати зі всіма функціями системи без обмежень, що підтверджує ефективність механізмів контролю доступу та захисту даних.
 
Додаток Б
Графічні матеріали


 
Рисунок Б.1 – UML діаграма прецедентів

 
Рисунок Б.2 – UML діаграма компонентів

 
Рисунок Б.3 – UML діаграма діяльності

 
Рисунок Б.4 – UML діаграма станів 
Додаток В
Програмний код

В.1 Ініціалізація та інтеграція системи перекладу
GitHub репозиторій: https://github.com/NureKucheriavenkoKristina/apz-pzpi-22-8-kucheriavenko-kristina/blob/main/Lab3/pzpi-22-8-kucheriavenko-kristina-lab3/i18n.ts
1. import i18n from "i18next";
2. import { initReactI18next } from "react-i18next";
3. import LanguageDetector from "i18next-browser-languagedetector";
4.  
5. import translationUA from "./locales/ua-translation.json";
6. import translationEN from "./locales/en-translation.json";
7. 
8. const resources = {
9.     ua: { translation: translationUA },
10.     en: { translation: translationEN },
11. };
12. 
13. i18n
14.     .use(LanguageDetector)
15.     .use(initReactI18next)
16.     .init({
17.         resources,
18.         fallbackLng: "ua",
19.         interpolation: {
20.             escapeValue: false,
21.         },
22.     });
23. 
24. export default i18n;

В.2 Функція для обробки формату часу
GitHub репозиторій: https://github.com/NureKucheriavenkoKristina/apz-pzpi-22-8-kucheriavenko-kristina/blob/main/Lab3/pzpi-22-8-kucheriavenko-kristina-lab3/pages/EventLogPage.tsx
1. const formatDateTime = (dateString) => {
2.     if (!dateString) return '';
3.     const date = new Date(dateString);
4. 
5.     const day = String(date.getDate()).padStart(2, '0');
6.     const month = String(date.getMonth() + 1).padStart(2, '0');
7.     const year = date.getFullYear();
8. 
9.     const hours = String(date.getHours()).padStart(2, '0');
10.     const minutes = String(date.getMinutes()).padStart(2, '0');
11.     const seconds = String(date.getSeconds()).padStart(2, '0');
12. 
13.     const datePart = UseEuFormat
14.         ? `${day}-${month}-${year}`
15.         : `${month}-${day}-${year}`;
16. 
17.     const timePart = UseEuFormat
18.         ? `${hours}:${minutes}:${seconds}`
19.         : `${((+hours % 12) || 12)}:${minutes}:${seconds} ${+hours < 12 ? 'AM' : 'PM'}`;
20. 
21.     const dayUTC = String(date.getUTCDate()).padStart(2, '0');
22.     const monthUTC = String(date.getUTCMonth() + 1).padStart(2, '0');
23.     const yearUTC = date.getUTCFullYear();
24. 
25.     const hoursUTC = String(date.getUTCHours()).padStart(2, '0');
26.     const minutesUTC = String(date.getUTCMinutes()).padStart(2, '0');
27.     const secondsUTC = String(date.getUTCSeconds()).padStart(2, '0');
28. 
29.     const datePartUTC = UseEuFormat
30.         ? `${dayUTC}-${monthUTC}-${yearUTC}`
31.         : `${monthUTC}-${dayUTC}-${yearUTC}`;
32. 
33.     const timePartUTC = UseEuFormat
34.         ? `${hoursUTC}:${minutesUTC}:${secondsUTC}`
35.         : `${((+hoursUTC % 12) || 12)}:${minutesUTC}:${secondsUTC} ${+hoursUTC < 12 ? 'AM' : 'PM'}`;
36. 
37.     const localTime = `${datePart} ${timePart}`;
38.     const utcTime = `${datePartUTC} ${timePartUTC}`;
39. 
40.     return <>
41.         <span>{t("locale")}: {localTime}</span><br/>
42.         <span>UTC: {utcTime}</span>
43.     </>;
44. };


